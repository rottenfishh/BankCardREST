openapi: 3.1.0
info:
  title: OpenAPI definition
  version: v0
servers:
  - url: 'http://localhost:8080'
    description: Generated server url
security:
  - bearerAuth: []
paths:
  '/api/block-requests/admin/{idx}':
    put:
      tags:
        - Админ
      summary: Аппрувнуть запрос на блокировку карты
      operationId: approveBlockRequest
      parameters:
        - name: idx
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardBlockRequestForAdmin'
        required: true
      responses:
        '200':
          description: OK
  '/api/admin/users/{idx}':
    get:
      tags:
        - Управления пользователями(админ)
      summary: Получить пользователя по ид
      operationId: getUser
      parameters:
        - name: idx
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserDTO'
    put:
      tags:
        - Управления пользователями(админ)
      summary: Изменить данные о пользователе
      operationId: changeUser
      parameters:
        - name: idx
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditUserDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserDTO'
    delete:
      tags:
        - Управления пользователями(админ)
      summary: Удалить пользователя
      operationId: deleteUser
      parameters:
        - name: idx
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
  '/api/admin/cards/{idx}':
    put:
      tags:
        - Админ
      summary: Обновить параметры карты
      operationId: updateCard
      parameters:
        - name: idx
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditCardDTO'
        required: true
      responses:
        '200':
          description: OK
    delete:
      tags:
        - Админ
      summary: Удалить карту
      operationId: deleteCard
      parameters:
        - name: idx
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
  /auth/sign-up:
    post:
      tags:
        - Аутентификация
      summary: Регистрация пользователя
      operationId: signUp
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUpDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JwtAuthResponse'
  /auth/sign-in:
    post:
      tags:
        - Аутентификация
      summary: Авторизация пользователя
      operationId: signIn
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignInDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JwtAuthResponse'
  /api/cards/transfer:
    post:
      tags:
        - Пользователь
      summary: Перевести денюжки
      operationId: transferMoney
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransferDTO'
        required: true
      responses:
        '200':
          description: OK
  /api/block-requests:
    post:
      tags:
        - Пользователь
      summary: Запросить блокировку карты
      operationId: createCardBlockRequest
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlockRequestFromUser'
        required: true
      responses:
        '200':
          description: OK
  /api/admin/users:
    get:
      tags:
        - Управления пользователями(админ)
      summary: Получить список пользователей
      operationId: getAllUsers
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDTO'
    post:
      tags:
        - Управления пользователями(админ)
      summary: Создать нового пользователя
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserDTO'
  /api/admin/cards:
    get:
      tags:
        - Админ
      summary: Получить все карты
      operationId: getCards
      parameters:
        - name: userId
          in: query
          required: false
          schema:
            type: integer
            format: int64
        - name: status
          in: query
          required: false
          schema:
            type: string
            enum:
              - ACTIVE
              - BLOCKED
              - EXPIRED
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Card'
    post:
      tags:
        - Админ
      summary: Создать новую карту
      operationId: createCard
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCardDTO'
        required: true
      responses:
        '200':
          description: OK
  /api/cards:
    get:
      tags:
        - Пользователь
      summary: Посмотреть свои карты
      operationId: getCardsUser
      parameters:
        - name: status
          in: query
          required: false
          schema:
            type: string
            enum:
              - ACTIVE
              - BLOCKED
              - EXPIRED
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CardDTO'
  '/api/cards/{idx}/balance':
    get:
      tags:
        - Пользователь
      summary: Посмотреть баланс конкретной карты
      operationId: getBalanceUser
      parameters:
        - name: idx
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: number
                format: double
  /api/cards/pages:
    get:
      tags:
        - card-controller
      operationId: getUserCards
      parameters:
        - name: search
          in: query
          required: false
          schema:
            type: string
        - name: page
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 10
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageCardDTO'
  /api/block-requests/admin:
    get:
      tags:
        - Админ
      summary: Получить все запросы на блокировку карт
      operationId: getCardBlockRequests
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BlockRequestFromUser'
components:
  schemas:
    CardBlockRequestForAdmin:
      type: object
      properties:
        userId:
          type: integer
          format: int64
        cardId:
          type: integer
          format: int64
        blockStatus:
          type: string
          enum:
            - REQUESTED
            - APPROVED
            - REJECTED
    EditUserDTO:
      type: object
      description: Вид запроса от админа на редактирование данных пользователя
      properties:
        name:
          type: string
        role:
          type: string
          enum:
            - ADMIN
            - USER
    UserDTO:
      type: object
      description: Шаблон данных о пользователе
      properties:
        id:
          type: integer
          format: int64
        userName:
          type: string
        role:
          type: string
          enum:
            - ADMIN
            - USER
    EditCardDTO:
      type: object
      description: Вид запроса от админа на редактирование данных о карте
      properties:
        balance:
          type: number
          format: double
        status:
          type: string
          enum:
            - ACTIVE
            - BLOCKED
            - EXPIRED
        expirationDate:
          type: string
          format: date-time
    SignUpDTO:
      type: object
      description: Запрос на регистрацию
      properties:
        username:
          type: string
          description: Имя пользователя
          example: Jon
          maxLength: 50
          minLength: 2
        password:
          type: string
          description: Пароль
          example: my_1secret1_password
          maxLength: 255
          minLength: 4
      required:
        - username
    JwtAuthResponse:
      type: object
      description: Ответ c токеном доступа
      properties:
        token:
          type: string
          description: Токен доступа
          example: eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJhZG1pbiIsImV4cCI6MTYyMjUwNj...
    SignInDTO:
      type: object
      description: Запрос на аутентификацию
      properties:
        username:
          type: string
          description: Имя пользователя
          example: Jon
          maxLength: 50
          minLength: 2
        password:
          type: string
          description: Пароль
          example: my_1secret1_password
          maxLength: 255
          minLength: 4
      required:
        - password
        - username
    TransferDTO:
      type: object
      description: Шаблон запроса на перевод денег с одной карты пользователя на другую
      properties:
        fromCardId:
          type: integer
          format: int64
        toCardId:
          type: integer
          format: int64
        amount:
          type: number
          format: double
    BlockRequestFromUser:
      type: object
      description: Вид запроса на блокировку карты
      properties:
        cardId:
          type: integer
          format: int64
        blockStatus:
          type: string
          enum:
            - REQUESTED
            - APPROVED
            - REJECTED
    CreateUserDTO:
      type: object
      description: Вид запроса от админа на создание пользователя
      properties:
        name:
          type: string
        password:
          type: string
        role:
          type: string
          enum:
            - ADMIN
            - USER
    CreateCardDTO:
      type: object
      description: Вид запроса от админа на создание карты
      properties:
        ownerId:
          type: integer
          format: int64
        cardNumber:
          type: string
        expirationDate:
          type: string
          format: date-time
    CardDTO:
      type: object
      description: Информация о карте (для отображения пользователю)
      properties:
        ownerId:
          type: integer
          format: int64
        id:
          type: integer
          format: int64
        maskedCardNumber:
          type: string
        expiratonDate:
          type: string
          format: date-time
        status:
          type: string
          enum:
            - ACTIVE
            - BLOCKED
            - EXPIRED
        balance:
          type: number
          format: double
    PageCardDTO:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        first:
          type: boolean
        last:
          type: boolean
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/CardDTO'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        numberOfElements:
          type: integer
          format: int32
        pageable:
          $ref: '#/components/schemas/PageableObject'
        empty:
          type: boolean
    PageableObject:
      type: object
      properties:
        offset:
          type: integer
          format: int64
        sort:
          $ref: '#/components/schemas/SortObject'
        paged:
          type: boolean
        pageSize:
          type: integer
          format: int32
        pageNumber:
          type: integer
          format: int32
        unpaged:
          type: boolean
    SortObject:
      type: object
      properties:
        empty:
          type: boolean
        sorted:
          type: boolean
        unsorted:
          type: boolean
    Card:
      type: object
      description: Банковская карта пользователя
      properties:
        id:
          type: integer
          format: int64
          description: Уникальный идентификатор карты
          example: 1
        cardNumber:
          type: string
          description: Номер карты
          example: 1234567812345678
        expirationDate:
          type: string
          format: date-time
          description: Дата окончания действия карты
          example: '2027-12-31'
        status:
          type: string
          description: Статус карты
          enum:
            - ACTIVE
            - BLOCKED
            - EXPIRED
          example: ACTIVE
        balance:
          type: number
          format: double
          description: Баланс карты
          example: 1000
        user:
          $ref: '#/components/schemas/User'
          description: Владелец карты
    User:
      type: object
      description: Пользователь
      properties:
        id:
          type: integer
          format: int64
          description: Уникальный идентификатор пользователя
          example: 1
        username:
          type: string
          description: Имя пользователя
          example: Dio
        password:
          type: string
          description: Зашифрованный пароль
          example: bebe
        role:
          type: string
          description: Роль пользователя
          enum:
            - ADMIN
            - USER
          example: USER
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
